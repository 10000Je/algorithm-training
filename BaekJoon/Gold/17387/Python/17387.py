# no. 17387: 선분 교차 2 (Gold II)
# 어떠한 선분이 교차한다면 한 선분을 기준으로 양 점을 외적한 값의
# 부호가 다를 것이다. 왜냐하면 한 점은 선분의 반시계방향, 한 점은
# 선분의 시계방향에 존재할 것이기 때문이다. 단, 선분의 길이는 무한하지가
# 않으므로, 두 선분 각각 서로를 교차하는지 확인해주어야 한다.

# if) 만약 1선분을 기준으로한 두 외적의 곱이 음수라면
# -> 2선분을 기준으로한 두 외적의 곱이 음수라면 교차한다.
# -> 2선분을 기준으로한 두 외적의 곱이 0이라면, 선분위에 1선분의 한 점이
# 2선분 위에 존재한다는 의미, 이는 교차하는 것으로 판단해야한다.
# -> 2선분을 기준으로한 두 외적의 곱이 양수라면 교차하지 않는다.
# if) 만약 1선분을 기준으로한 두 외적의 곱이 양수라면 무조건 교차하지 않는다.
# if) 만약 1선분을 기준으로한 두 외적의 곱이 0이라면 몇가지 경우의 수가 존재한다.
# -> 만약 2선분을 기준으로한 두 외적의 곱이 음수라면 앞서 설명한 경우와 마찬가지로
# 2선분의 한 점이 1선분 위에 존재한다는 의미이다. 이는 교차하는 것으로 판단해야만 한다
# -> 만약 2선분을 기준으로한 두 외적의 곱이 양수라면 무조건 교차하지 않는다.
# -> 만약 2선분을 기준으로한 두 외적의 곱이 0이라면, 두 선분이 평행하다는 의미가 된다
# 이때 한 선분의 끝이 다른 선분의 시작점과 같거나 앞에 있다면, 두 선분이 이어져 있다는
# 의미가 되므로, 이는 교차한다고 판단해야한다.

# 체감 난이도 : Gold I
# 수없이 많은 반례들로 사람을 괴롭히는 문제...
# 특히 두 점이 평행할 경우를 처리하는 것에서 애를 먹었다.

x1, y1, x2, y2 = map(int, input().split())
x3, y3, x4, y4 = map(int, input().split())

line_1 = (x2-x1, y2-y1)
line_2 = (x4-x3, y4-y3)

def outer_product(u, v):
    x1, y1 = u
    x2, y2 = v
    return x1*y2-y1*x2

op1 = outer_product(line_1, (x3-x1, y3-y1))
op2 = outer_product(line_1, (x4-x1, y4-y1))

op3 = outer_product(line_2, (x1-x3, y1-y3))
op4 = outer_product(line_2, (x2-x3, y2-y3))

if op1 * op2 > 0:
    print(0)

if op1 * op2 < 0:
    if op3 * op4 <= 0:
        print(1)
    else:
        print(0)

if op1 * op2 == 0:
    if op3 * op4 < 0:
        print(1)
    if op3 * op4 > 0:
        print(0)
    if op3 * op4 == 0:
        if abs(max(x1, x2, x3, x4)-min(x1, x2, x3, x4)) <= abs(x2-x1)+abs(x4-x3) and abs(max(y1, y2, y3, y4)-min(y1, y2, y3, y4)) <= abs(y2-y1)+abs(y4-y3):
            print(1)
        else:
            print(0)
